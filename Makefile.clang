SUBNAME = dali
LIB = brainstorm-$(SUBNAME)
INCDIR = smartmet/brainstorm/plugins/$(SUBNAME)

# Installation directories

processor := $(shell uname -p)

ifeq ($(origin PREFIX), undefined)
  PREFIX = /usr
else
  PREFIX = $(PREFIX)
endif

ifeq ($(processor), x86_64)
  libdir = $(PREFIX)/lib64
else
  libdir = $(PREFIX)/lib
endif

bindir = $(PREFIX)/bin
includedir = $(PREFIX)/include
datadir = $(PREFIX)/share
plugindir = $(datadir)/brainstorm/plugins
objdir = obj

# Compiler options

DEFINES = -DUNIX -D_REENTRANT

FLAGS = -std=c++11 -fPIC -MD \
	-Weverything \
	-Wno-c++98-compat \
	-Wno-float-equal \
	-Wno-padded \
	-Wno-missing-prototypes \
	-Wno-sign-conversion \
	-Wno-documentation

CC = clang++

# Compile options in detault, debug and profile modes

CFLAGS         = $(DEFINES) $(FLAGS) -DNDEBUG -O2
CFLAGS_DEBUG   = $(DEFINES) $(FLAGS) -Werror  -O0 -g
CFLAGS_PROFILE = $(DEFINES) $(FLAGS) -DNDEBUG -O2 -g -pg

INCLUDES = -isystem $(includedir) \
	-isystem $(includedir)/smartmet

LIBS = -L$(libdir) \
	-lsmartmet-brainstorm-spine \
	-lsmartmet-newbase \
	-lsmartmet-macgyver \
	-lctpp2 \
	-lthor -lfl -ly \
	-lboost_date_time-mt \
	-lboost_thread-mt \
	-lboost_iostreams-mt \
	-lboost_filesystem-mt \
	-lboost_system-mt \
	-lbz2 -lz

# rpm variables

rpmsourcedir = /tmp/$(shell whoami)/rpmbuild

rpmerr = "There's no spec file ($(LIB).spec). RPM wasn't created. Please make a spec file or copy and rename it into $(LIB).spec"

# What to install

LIBFILE = $(SUBNAME).so

# How to install

INSTALL_PROG = install -p -m 775
INSTALL_DATA = install -p -m 664

# Compile option overrides

ifneq (,$(findstring debug,$(MAKECMDGOALS)))
  CFLAGS = $(CFLAGS_DEBUG)
endif

ifneq (,$(findstring profile,$(MAKECMDGOALS)))
  CFLAGS = $(CFLAGS_PROFILE)
endif

# Compilation directories

vpath %.cpp source
vpath %.h include

# The files to be compiled

SRCS = $(wildcard source/*.cpp)
HDRS = $(wildcard include/*.h)
OBJS = $(patsubst %.cpp, obj/%.o, $(notdir $(SRCS)))

INCLUDES := -Iinclude $(INCLUDES)

.PHONY: test rpm

# The rules

all: configtest objdir $(LIBFILE)
debug: all
release: all
profile: all

configtest:
	@echo Validating cnf/dali.conf
	@cfgvalidate -v cnf/dali.conf

$(LIBFILE): $(OBJS)
	$(CC) $(CFLAGS) -shared -o $(LIBFILE) $(OBJS) $(LIBS)

clean:
	rm -f $(LIBFILE) $(OBJS) *~ source/*~ include/*~

install:
	@mkdir -p $(includedir)/$(INCDIR)
	@list='$(HDRS)'; \
	for hdr in $$list; do \
	  HDR=$$(basename $$hdr); \
	  echo $(INSTALL_DATA) $$hdr $(includedir)/$(INCDIR)/$$HDR; \
	  $(INSTALL_DATA) $$hdr $(includedir)/$(INCDIR)/$$HDR; \
	done
	@mkdir -p $(plugindir)
	$(INSTALL_DATA) $(LIBFILE) $(plugindir)/$(LIBFILE)

test:
	cd test && make test

objdir:
	@mkdir -p $(objdir)

rpm: clean
	if [ -e $(LIB).spec ]; \
	then \
	  mkdir -p $(rpmsourcedir) ; \
	  tar -C ../ -cf $(rpmsourcedir)/smartmet-$(LIB).tar $(SUBNAME) ; \
	  gzip -f $(rpmsourcedir)/smartmet-$(LIB).tar ; \
	  TAR_OPTIONS=--wildcards rpmbuild -v -ta $(rpmsourcedir)/smartmet-$(LIB).tar.gz ; \
	  rm -f $(rpmsourcedir)/smartmet-$(LIB).tar.gz ; \
	else \
	  echo $(rpmerr); \
	fi;

.SUFFIXES: $(SUFFIXES) .cpp

obj/%.o: %.cpp
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<

ifneq ($(wildcard obj/*.d),)
-include $(wildcard obj/*.d)
endif
